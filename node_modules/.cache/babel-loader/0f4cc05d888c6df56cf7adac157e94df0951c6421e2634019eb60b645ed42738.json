{"ast":null,"code":"var Algorithm;\n(function (Algorithm) {\n  Algorithm[\"SHA1\"] = \"sha1\";\n  Algorithm[\"SHA256\"] = \"sha256\";\n})(Algorithm || (Algorithm = {}));\nconst getAlgorithm = signature => {\n  return signature.startsWith(\"sha256=\") ? \"sha256\" : \"sha1\";\n};\nconst enc = new TextEncoder();\nfunction hexToUInt8Array(string) {\n  // convert string to pairs of 2 characters\n  const pairs = string.match(/[\\dA-F]{2}/gi);\n  // convert the octets to integers\n  const integers = pairs.map(function (s) {\n    return parseInt(s, 16);\n  });\n  return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n  return Array.prototype.map.call(new Uint8Array(signature), x => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\nfunction getHMACHashName(algorithm) {\n  return {\n    [Algorithm.SHA1]: \"SHA-1\",\n    [Algorithm.SHA256]: \"SHA-256\"\n  }[algorithm];\n}\nasync function importKey(secret, algorithm) {\n  // ref: https://developer.mozilla.org/en-US/docs/Web/API/HmacImportParams\n  return crypto.subtle.importKey(\"raw\",\n  // raw format of the key - should be Uint8Array\n  enc.encode(secret), {\n    // algorithm details\n    name: \"HMAC\",\n    hash: {\n      name: getHMACHashName(algorithm)\n    }\n  }, false,\n  // export = false\n  [\"sign\", \"verify\"] // what this key can do\n  );\n}\n\nasync function sign(options, payload) {\n  const {\n    secret,\n    algorithm\n  } = typeof options === \"object\" ? {\n    secret: options.secret,\n    algorithm: options.algorithm || Algorithm.SHA256\n  } : {\n    secret: options,\n    algorithm: Algorithm.SHA256\n  };\n  if (!secret || !payload) {\n    throw new TypeError(\"[@octokit/webhooks-methods] secret & payload required for sign()\");\n  }\n  if (!Object.values(Algorithm).includes(algorithm)) {\n    throw new TypeError(`[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`);\n  }\n  const signature = await crypto.subtle.sign(\"HMAC\", await importKey(secret, algorithm), enc.encode(payload));\n  return `${algorithm}=${UInt8ArrayToHex(signature)}`;\n}\nasync function verify(secret, eventPayload, signature) {\n  if (!secret || !eventPayload || !signature) {\n    throw new TypeError(\"[@octokit/webhooks-methods] secret, eventPayload & signature required\");\n  }\n  const algorithm = getAlgorithm(signature);\n  return await crypto.subtle.verify(\"HMAC\", await importKey(secret, algorithm), hexToUInt8Array(signature.replace(`${algorithm}=`, \"\")), enc.encode(eventPayload));\n}\nexport { sign, verify };","map":{"version":3,"names":["Algorithm","getAlgorithm","signature","startsWith","enc","TextEncoder","hexToUInt8Array","string","pairs","match","integers","map","s","parseInt","Uint8Array","UInt8ArrayToHex","Array","prototype","call","x","toString","padStart","join","getHMACHashName","algorithm","SHA1","SHA256","importKey","secret","crypto","subtle","encode","name","hash","sign","options","payload","TypeError","Object","values","includes","verify","eventPayload","replace"],"sources":["/home/lenovo/Documents/personal/redux_cart/public-repo-search/node_modules/@octokit/webhooks-methods/dist-src/types.js","/home/lenovo/Documents/personal/redux_cart/public-repo-search/node_modules/@octokit/webhooks-methods/dist-src/utils.js","/home/lenovo/Documents/personal/redux_cart/public-repo-search/node_modules/@octokit/webhooks-methods/dist-src/web.js"],"sourcesContent":["export var Algorithm;\n(function (Algorithm) {\n    Algorithm[\"SHA1\"] = \"sha1\";\n    Algorithm[\"SHA256\"] = \"sha256\";\n})(Algorithm || (Algorithm = {}));\n","export const getAlgorithm = (signature) => {\n    return signature.startsWith(\"sha256=\") ? \"sha256\" : \"sha1\";\n};\n","import { Algorithm } from \"./types\";\nimport { getAlgorithm } from \"./utils\";\nconst enc = new TextEncoder();\nfunction hexToUInt8Array(string) {\n    // convert string to pairs of 2 characters\n    const pairs = string.match(/[\\dA-F]{2}/gi);\n    // convert the octets to integers\n    const integers = pairs.map(function (s) {\n        return parseInt(s, 16);\n    });\n    return new Uint8Array(integers);\n}\nfunction UInt8ArrayToHex(signature) {\n    return Array.prototype.map\n        .call(new Uint8Array(signature), (x) => x.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n}\nfunction getHMACHashName(algorithm) {\n    return {\n        [Algorithm.SHA1]: \"SHA-1\",\n        [Algorithm.SHA256]: \"SHA-256\",\n    }[algorithm];\n}\nasync function importKey(secret, algorithm) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/HmacImportParams\n    return crypto.subtle.importKey(\"raw\", // raw format of the key - should be Uint8Array\n    enc.encode(secret), {\n        // algorithm details\n        name: \"HMAC\",\n        hash: { name: getHMACHashName(algorithm) },\n    }, false, // export = false\n    [\"sign\", \"verify\"] // what this key can do\n    );\n}\nexport async function sign(options, payload) {\n    const { secret, algorithm } = typeof options === \"object\"\n        ? {\n            secret: options.secret,\n            algorithm: options.algorithm || Algorithm.SHA256,\n        }\n        : { secret: options, algorithm: Algorithm.SHA256 };\n    if (!secret || !payload) {\n        throw new TypeError(\"[@octokit/webhooks-methods] secret & payload required for sign()\");\n    }\n    if (!Object.values(Algorithm).includes(algorithm)) {\n        throw new TypeError(`[@octokit/webhooks] Algorithm ${algorithm} is not supported. Must be  'sha1' or 'sha256'`);\n    }\n    const signature = await crypto.subtle.sign(\"HMAC\", await importKey(secret, algorithm), enc.encode(payload));\n    return `${algorithm}=${UInt8ArrayToHex(signature)}`;\n}\nexport async function verify(secret, eventPayload, signature) {\n    if (!secret || !eventPayload || !signature) {\n        throw new TypeError(\"[@octokit/webhooks-methods] secret, eventPayload & signature required\");\n    }\n    const algorithm = getAlgorithm(signature);\n    return await crypto.subtle.verify(\"HMAC\", await importKey(secret, algorithm), hexToUInt8Array(signature.replace(`${algorithm}=`, \"\")), enc.encode(eventPayload));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}