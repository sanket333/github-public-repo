{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { request } from '@octokit/request';\nimport btoa from 'btoa-lite';\nimport { createOAuthUserAuth, requiresBasicAuth } from '@octokit/auth-oauth-user';\nexport { createOAuthUserAuth } from '@octokit/auth-oauth-user';\nasync function auth(state, authOptions) {\n  if (authOptions.type === \"oauth-app\") {\n    return {\n      type: \"oauth-app\",\n      clientId: state.clientId,\n      clientSecret: state.clientSecret,\n      clientType: state.clientType,\n      headers: {\n        authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`\n      }\n    };\n  }\n  if (\"factory\" in authOptions) {\n    const {\n      type,\n      ...options\n    } = {\n      ...authOptions,\n      ...state\n    };\n    // @ts-expect-error TODO: `option` cannot be never, is this a bug?\n    return authOptions.factory(options);\n  }\n  const common = {\n    clientId: state.clientId,\n    clientSecret: state.clientSecret,\n    request: state.request,\n    ...authOptions\n  };\n  // TS: Look what you made me do\n  const userAuth = state.clientType === \"oauth-app\" ? await createOAuthUserAuth({\n    ...common,\n    clientType: state.clientType\n  }) : await createOAuthUserAuth({\n    ...common,\n    clientType: state.clientType\n  });\n  return userAuth();\n}\nasync function hook(state, request, route, parameters) {\n  let endpoint = request.endpoint.merge(route, parameters);\n  // Do not intercept OAuth Web/Device flow request\n  if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n    return request(endpoint);\n  }\n  if (state.clientType === \"github-app\" && !requiresBasicAuth(endpoint.url)) {\n    throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`);\n  }\n  const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n  endpoint.headers.authorization = `basic ${credentials}`;\n  try {\n    return await request(endpoint);\n  } catch (error) {\n    /* istanbul ignore if */\n    if (error.status !== 401) throw error;\n    error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n    throw error;\n  }\n}\nconst VERSION = \"5.0.5\";\nfunction createOAuthAppAuth(options) {\n  const state = Object.assign({\n    request: request.defaults({\n      headers: {\n        \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`\n      }\n    }),\n    clientType: \"oauth-app\"\n  }, options);\n  // @ts-expect-error not worth the extra code to appease TS\n  return Object.assign(auth.bind(null, state), {\n    hook: hook.bind(null, state)\n  });\n}\nexport { createOAuthAppAuth };","map":{"version":3,"names":["auth","state","authOptions","type","clientId","clientSecret","clientType","headers","authorization","btoa","options","factory","common","request","userAuth","createOAuthUserAuth","hook","route","parameters","endpoint","merge","test","url","requiresBasicAuth","Error","method","credentials","error","status","message","VERSION","createOAuthAppAuth","Object","assign","defaults","getUserAgent","bind"],"sources":["/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/@octokit/auth-oauth-app/dist-src/auth.js","/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/@octokit/auth-oauth-app/dist-src/hook.js","/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/@octokit/auth-oauth-app/dist-src/version.js","/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/@octokit/auth-oauth-app/dist-src/index.js"],"sourcesContent":["import btoa from \"btoa-lite\";\nimport { createOAuthUserAuth } from \"@octokit/auth-oauth-user\";\nexport async function auth(state, authOptions) {\n    if (authOptions.type === \"oauth-app\") {\n        return {\n            type: \"oauth-app\",\n            clientId: state.clientId,\n            clientSecret: state.clientSecret,\n            clientType: state.clientType,\n            headers: {\n                authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`,\n            },\n        };\n    }\n    if (\"factory\" in authOptions) {\n        const { type, ...options } = {\n            ...authOptions,\n            ...state,\n        };\n        // @ts-expect-error TODO: `option` cannot be never, is this a bug?\n        return authOptions.factory(options);\n    }\n    const common = {\n        clientId: state.clientId,\n        clientSecret: state.clientSecret,\n        request: state.request,\n        ...authOptions,\n    };\n    // TS: Look what you made me do\n    const userAuth = state.clientType === \"oauth-app\"\n        ? await createOAuthUserAuth({\n            ...common,\n            clientType: state.clientType,\n        })\n        : await createOAuthUserAuth({\n            ...common,\n            clientType: state.clientType,\n        });\n    return userAuth();\n}\n","import btoa from \"btoa-lite\";\nimport { requiresBasicAuth } from \"@octokit/auth-oauth-user\";\nexport async function hook(state, request, route, parameters) {\n    let endpoint = request.endpoint.merge(route, parameters);\n    // Do not intercept OAuth Web/Device flow request\n    if (/\\/login\\/(oauth\\/access_token|device\\/code)$/.test(endpoint.url)) {\n        return request(endpoint);\n    }\n    if (state.clientType === \"github-app\" && !requiresBasicAuth(endpoint.url)) {\n        throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than \"/applications/{client_id}/**\". \"${endpoint.method} ${endpoint.url}\" is not supported.`);\n    }\n    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);\n    endpoint.headers.authorization = `basic ${credentials}`;\n    try {\n        return await request(endpoint);\n    }\n    catch (error) {\n        /* istanbul ignore if */\n        if (error.status !== 401)\n            throw error;\n        error.message = `[@octokit/auth-oauth-app] \"${endpoint.method} ${endpoint.url}\" does not support clientId/clientSecret basic authentication.`;\n        throw error;\n    }\n}\n","export const VERSION = \"5.0.5\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { request } from \"@octokit/request\";\nimport { auth } from \"./auth\";\nimport { hook } from \"./hook\";\nimport { VERSION } from \"./version\";\nexport { createOAuthUserAuth } from \"@octokit/auth-oauth-user\";\nexport function createOAuthAppAuth(options) {\n    const state = Object.assign({\n        request: request.defaults({\n            headers: {\n                \"user-agent\": `octokit-auth-oauth-app.js/${VERSION} ${getUserAgent()}`,\n            },\n        }),\n        clientType: \"oauth-app\",\n    }, options);\n    // @ts-expect-error not worth the extra code to appease TS\n    return Object.assign(auth.bind(null, state), {\n        hook: hook.bind(null, state),\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}