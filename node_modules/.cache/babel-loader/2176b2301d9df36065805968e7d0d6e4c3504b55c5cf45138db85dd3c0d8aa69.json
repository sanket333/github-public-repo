{"ast":null,"code":"function oauthAuthorizationUrl(options) {\n  const clientType = options.clientType || \"oauth-app\";\n  const baseUrl = options.baseUrl || \"https://github.com\";\n  const result = {\n    clientType,\n    allowSignup: options.allowSignup === false ? false : true,\n    clientId: options.clientId,\n    login: options.login || null,\n    redirectUrl: options.redirectUrl || null,\n    state: options.state || Math.random().toString(36).substr(2),\n    url: \"\"\n  };\n  if (clientType === \"oauth-app\") {\n    const scopes = \"scopes\" in options ? options.scopes : [];\n    result.scopes = typeof scopes === \"string\" ? scopes.split(/[,\\s]+/).filter(Boolean) : scopes;\n  }\n  result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n  return result;\n}\nfunction urlBuilderAuthorize(base, options) {\n  const map = {\n    allowSignup: \"allow_signup\",\n    clientId: \"client_id\",\n    login: \"login\",\n    redirectUrl: \"redirect_uri\",\n    scopes: \"scope\",\n    state: \"state\"\n  };\n  let url = base;\n  Object.keys(map)\n  // Filter out keys that are null and remove the url key\n  .filter(k => options[k] !== null)\n  // Filter out empty scopes array\n  .filter(k => {\n    if (k !== \"scopes\") return true;\n    if (options.clientType === \"github-app\") return false;\n    return !Array.isArray(options[k]) || options[k].length > 0;\n  })\n  // Map Array with the proper URL parameter names and change the value to a string using template strings\n  // @ts-ignore\n  .map(key => [map[key], `${options[key]}`])\n  // Finally, build the URL\n  .forEach((_ref, index) => {\n    let [key, value] = _ref;\n    url += index === 0 ? `?` : \"&\";\n    url += `${key}=${encodeURIComponent(value)}`;\n  });\n  return url;\n}\nexport { oauthAuthorizationUrl };","map":{"version":3,"names":["oauthAuthorizationUrl","options","clientType","baseUrl","result","allowSignup","clientId","login","redirectUrl","state","Math","random","toString","substr","url","scopes","split","filter","Boolean","urlBuilderAuthorize","base","map","Object","keys","k","Array","isArray","length","key","forEach","_ref","index","value","encodeURIComponent"],"sources":["/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/@octokit/oauth-authorization-url/dist-src/index.js"],"sourcesContent":["export function oauthAuthorizationUrl(options) {\n    const clientType = options.clientType || \"oauth-app\";\n    const baseUrl = options.baseUrl || \"https://github.com\";\n    const result = {\n        clientType,\n        allowSignup: options.allowSignup === false ? false : true,\n        clientId: options.clientId,\n        login: options.login || null,\n        redirectUrl: options.redirectUrl || null,\n        state: options.state || Math.random().toString(36).substr(2),\n        url: \"\",\n    };\n    if (clientType === \"oauth-app\") {\n        const scopes = \"scopes\" in options ? options.scopes : [];\n        result.scopes =\n            typeof scopes === \"string\"\n                ? scopes.split(/[,\\s]+/).filter(Boolean)\n                : scopes;\n    }\n    result.url = urlBuilderAuthorize(`${baseUrl}/login/oauth/authorize`, result);\n    return result;\n}\nfunction urlBuilderAuthorize(base, options) {\n    const map = {\n        allowSignup: \"allow_signup\",\n        clientId: \"client_id\",\n        login: \"login\",\n        redirectUrl: \"redirect_uri\",\n        scopes: \"scope\",\n        state: \"state\",\n    };\n    let url = base;\n    Object.keys(map)\n        // Filter out keys that are null and remove the url key\n        .filter((k) => options[k] !== null)\n        // Filter out empty scopes array\n        .filter((k) => {\n        if (k !== \"scopes\")\n            return true;\n        if (options.clientType === \"github-app\")\n            return false;\n        return !Array.isArray(options[k]) || options[k].length > 0;\n    })\n        // Map Array with the proper URL parameter names and change the value to a string using template strings\n        // @ts-ignore\n        .map((key) => [map[key], `${options[key]}`])\n        // Finally, build the URL\n        .forEach(([key, value], index) => {\n        url += index === 0 ? `?` : \"&\";\n        url += `${key}=${encodeURIComponent(value)}`;\n    });\n    return url;\n}\n"],"mappings":"AAAO,SAASA,qBAAqBA,CAACC,OAAO,EAAE;EAC3C,MAAMC,UAAU,GAAGD,OAAO,CAACC,UAAU,IAAI,WAAW;EACpD,MAAMC,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,oBAAoB;EACvD,MAAMC,MAAM,GAAG;IACXF,UAAU;IACVG,WAAW,EAAEJ,OAAO,CAACI,WAAW,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;IACzDC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;IAC1BC,KAAK,EAAEN,OAAO,CAACM,KAAK,IAAI,IAAI;IAC5BC,WAAW,EAAEP,OAAO,CAACO,WAAW,IAAI,IAAI;IACxCC,KAAK,EAAER,OAAO,CAACQ,KAAK,IAAIC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;IAC5DC,GAAG,EAAE;EACb,CAAK;EACD,IAAIZ,UAAU,KAAK,WAAW,EAAE;IAC5B,MAAMa,MAAM,GAAG,QAAQ,IAAId,OAAO,GAAGA,OAAO,CAACc,MAAM,GAAG,EAAE;IACxDX,MAAM,CAACW,MAAM,GACT,OAAOA,MAAM,KAAK,QAAQ,GACpBA,MAAM,CAACC,KAAK,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,GACtCH,MAAM;EACxB;EACIX,MAAM,CAACU,GAAG,GAAGK,mBAAmB,CAAE,GAAEhB,OAAQ,wBAAuB,EAAEC,MAAM,CAAC;EAC5E,OAAOA,MAAM;AACjB;AACA,SAASe,mBAAmBA,CAACC,IAAI,EAAEnB,OAAO,EAAE;EACxC,MAAMoB,GAAG,GAAG;IACRhB,WAAW,EAAE,cAAc;IAC3BC,QAAQ,EAAE,WAAW;IACrBC,KAAK,EAAE,OAAO;IACdC,WAAW,EAAE,cAAc;IAC3BO,MAAM,EAAE,OAAO;IACfN,KAAK,EAAE;EACf,CAAK;EACD,IAAIK,GAAG,GAAGM,IAAI;EACdE,MAAM,CAACC,IAAI,CAACF,GAAG;EACnB;EAAA,CACSJ,MAAM,CAAEO,CAAC,IAAKvB,OAAO,CAACuB,CAAC,CAAC,KAAK,IAAI;EAC1C;EAAA,CACSP,MAAM,CAAEO,CAAC,IAAK;IACf,IAAIA,CAAC,KAAK,QAAQ,EACd,OAAO,IAAI;IACf,IAAIvB,OAAO,CAACC,UAAU,KAAK,YAAY,EACnC,OAAO,KAAK;IAChB,OAAO,CAACuB,KAAK,CAACC,OAAO,CAACzB,OAAO,CAACuB,CAAC,CAAC,CAAC,IAAIvB,OAAO,CAACuB,CAAC,CAAC,CAACG,MAAM,GAAG,CAAC;EAClE,CAAK;EACL;EACA;EAAA,CACSN,GAAG,CAAEO,GAAG,IAAK,CAACP,GAAG,CAACO,GAAG,CAAC,EAAG,GAAE3B,OAAO,CAAC2B,GAAG,CAAE,EAAC,CAAC;EACnD;EAAA,CACSC,OAAO,CAAC,CAAAC,IAAA,EAAeC,KAAK,KAAK;IAAA,IAAxB,CAACH,GAAG,EAAEI,KAAK,CAAC,GAAAF,IAAA;IACtBhB,GAAG,IAAIiB,KAAK,KAAK,CAAC,GAAI,GAAE,GAAG,GAAG;IAC9BjB,GAAG,IAAK,GAAEc,GAAI,IAAGK,kBAAkB,CAACD,KAAK,CAAE,EAAC;EACpD,CAAK,CAAC;EACF,OAAOlB,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}