{"ast":null,"code":"function t(t, n, r, e, i, a, o) {\n  try {\n    var u = t[a](o),\n      c = u.value;\n  } catch (t) {\n    return void r(t);\n  }\n  u.done ? n(c) : Promise.resolve(c).then(e, i);\n}\nfunction n(n) {\n  return function () {\n    var r = this,\n      e = arguments;\n    return new Promise(function (i, a) {\n      var o = n.apply(r, e);\n      function u(n) {\n        t(o, i, a, u, c, \"next\", n);\n      }\n      function c(n) {\n        t(o, i, a, u, c, \"throw\", n);\n      }\n      u(void 0);\n    });\n  };\n}\nfunction r(t) {\n  for (var n = new ArrayBuffer(t.length), r = new Uint8Array(n), e = 0, i = t.length; e < i; e++) r[e] = t.charCodeAt(e);\n  return n;\n}\nfunction e(t) {\n  return t.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction i(t) {\n  return e(btoa(JSON.stringify(t)));\n}\nvar a = function () {\n  var t = n(function* (t) {\n    var {\n      privateKey: n,\n      payload: a\n    } = t;\n    if (/BEGIN RSA PRIVATE KEY/.test(n)) throw new Error(\"[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme\");\n    var o,\n      u = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: {\n          name: \"SHA-256\"\n        }\n      },\n      c = (o = n.trim().split(\"\\n\").slice(1, -1).join(\"\"), r(atob(o))),\n      p = yield crypto.subtle.importKey(\"pkcs8\", c, u, !1, [\"sign\"]),\n      f = function (t, n) {\n        return \"\".concat(i(t), \".\").concat(i(n));\n      }({\n        alg: \"RS256\",\n        typ: \"JWT\"\n      }, a),\n      l = r(f),\n      s = function (t) {\n        for (var n = \"\", r = new Uint8Array(t), i = r.byteLength, a = 0; a < i; a++) n += String.fromCharCode(r[a]);\n        return e(btoa(n));\n      }(yield crypto.subtle.sign(u.name, p, l));\n    return \"\".concat(f, \".\").concat(s);\n  });\n  return function (n) {\n    return t.apply(this, arguments);\n  };\n}();\nfunction o(t) {\n  return u.apply(this, arguments);\n}\nfunction u() {\n  return (u = n(function* (t) {\n    var {\n        id: n,\n        privateKey: r,\n        now: e = Math.floor(Date.now() / 1e3)\n      } = t,\n      i = e - 30,\n      o = i + 600,\n      u = {\n        iat: i,\n        exp: o,\n        iss: n\n      };\n    return {\n      appId: n,\n      expiration: o,\n      token: yield a({\n        privateKey: r,\n        payload: u\n      })\n    };\n  })).apply(this, arguments);\n}\nexport { o as githubAppJwt };","map":{"version":3,"names":["r","t","n","ArrayBuffer","length","Uint8Array","e","i","charCodeAt","replace","btoa","JSON","stringify","a","privateKey","payload","test","Error","o","u","name","hash","c","trim","split","slice","join","atob","p","crypto","subtle","importKey","f","concat","alg","typ","l","s","byteLength","String","fromCharCode","sign","apply","arguments","id","now","Math","floor","Date","iat","exp","iss","appId","expiration","token","githubAppJwt"],"sources":["/home/lenovo/Documents/personal/redux_cart/gihub-repo/node_modules/universal-github-app-jwt/dist-web/index.js"],"sourcesContent":["function string2ArrayBuffer(str) {\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\nfunction getDERfromPEM(pem) {\n    const pemB64 = pem\n        .trim()\n        .split(\"\\n\")\n        .slice(1, -1) // Remove the --- BEGIN / END PRIVATE KEY ---\n        .join(\"\");\n    const decoded = atob(pemB64);\n    return string2ArrayBuffer(decoded);\n}\nfunction getEncodedMessage(header, payload) {\n    return `${base64encodeJSON(header)}.${base64encodeJSON(payload)}`;\n}\nfunction base64encode(buffer) {\n    var binary = \"\";\n    var bytes = new Uint8Array(buffer);\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return fromBase64(btoa(binary));\n}\nfunction fromBase64(base64) {\n    return base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64encodeJSON(obj) {\n    return fromBase64(btoa(JSON.stringify(obj)));\n}\n\nconst getToken = async ({ privateKey, payload, }) => {\n    // WebCrypto only supports PKCS#8, unfortunately\n    if (/BEGIN RSA PRIVATE KEY/.test(privateKey)) {\n        throw new Error(\"[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#readme\");\n    }\n    const algorithm = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: { name: \"SHA-256\" },\n    };\n    const header = { alg: \"RS256\", typ: \"JWT\" };\n    const privateKeyDER = getDERfromPEM(privateKey);\n    const importedKey = await crypto.subtle.importKey(\"pkcs8\", privateKeyDER, algorithm, false, [\"sign\"]);\n    const encodedMessage = getEncodedMessage(header, payload);\n    const encodedMessageArrBuf = string2ArrayBuffer(encodedMessage);\n    const signatureArrBuf = await crypto.subtle.sign(algorithm.name, importedKey, encodedMessageArrBuf);\n    const encodedSignature = base64encode(signatureArrBuf);\n    return `${encodedMessage}.${encodedSignature}`;\n};\n\nasync function githubAppJwt({ id, privateKey, now = Math.floor(Date.now() / 1000), }) {\n    // When creating a JSON Web Token, it sets the \"issued at time\" (iat) to 30s\n    // in the past as we have seen people running situations where the GitHub API\n    // claimed the iat would be in future. It turned out the clocks on the\n    // different machine were not in sync.\n    const nowWithSafetyMargin = now - 30;\n    const expiration = nowWithSafetyMargin + 60 * 10; // JWT expiration time (10 minute maximum)\n    const payload = {\n        iat: nowWithSafetyMargin,\n        exp: expiration,\n        iss: id,\n    };\n    const token = await getToken({\n        privateKey,\n        payload,\n    });\n    return {\n        appId: id,\n        expiration,\n        token,\n    };\n}\n\nexport { githubAppJwt };\n//# sourceMappingURL=index.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}